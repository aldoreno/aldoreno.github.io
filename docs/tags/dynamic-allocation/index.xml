<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dynamic-allocation on Endeavor</title>
    <link>https://leonardo.situmorang.net/tags/dynamic-allocation/</link>
    <description>Recent content in dynamic-allocation on Endeavor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Feb 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://leonardo.situmorang.net/tags/dynamic-allocation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Penggunaan &#39;const&#39; di C&#43;&#43;</title>
      <link>https://leonardo.situmorang.net/posts/2013/02/15/penggunaan-const-di-c-plus-plus/</link>
      <pubDate>Fri, 15 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonardo.situmorang.net/posts/2013/02/15/penggunaan-const-di-c-plus-plus/</guid>
      <description>Penggunaan konstanta di C++ ternyata unik sekali. Selain membuat konstanta, const juga bisa digunakan untuk hal lain.
Perhatikan CRectangle.h baris 23. Penggunaan const di akhir definisi fungsi membuatnya bersifat read-only. Compiler akan mengeluarkan error jika terdapat statement di dalam fungsi tersebut yang berusaha untuk mengubah state milik instance.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class CRectangle { // private member declaration private: int *width, *height; // public member declaration // function definition is in its .</description>
    </item>
    
  </channel>
</rss>
